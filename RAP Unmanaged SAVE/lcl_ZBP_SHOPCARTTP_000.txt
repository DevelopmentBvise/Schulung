CLASS lsc_zr_shopcarttp_000 DEFINITION INHERITING FROM cl_abap_behavior_saver.

  PROTECTED SECTION.

    METHODS save_modified REDEFINITION.

ENDCLASS.

CLASS lsc_zr_shopcarttp_000 IMPLEMENTATION.

  METHOD save_modified.
    DATA : lt_shopping_cart_as        TYPE STANDARD TABLE OF zashopcart_000.
    IF create-shoppingcart IS NOT INITIAL.
      lt_shopping_cart_as = CORRESPONDING #( create-shoppingcart MAPPING FROM ENTITY ).
      INSERT zashopcart_### FROM TABLE @lt_shopping_cart_as.
    ENDIF.
    IF update IS NOT INITIAL.
      CLEAR lt_shopping_cart_as.
      lt_shopping_cart_as = CORRESPONDING #( update-shoppingcart MAPPING FROM ENTITY ).
      LOOP AT update-shoppingcart  INTO DATA(shoppingcart) WHERE OrderUUID IS NOT INITIAL.
        MODIFY zashopcart_### FROM TABLE @lt_shopping_cart_as.
      ENDLOOP.
    ENDIF.

*************Add CONVERT KEY statement for Purchase Requisition create in case of EML implementation type**********

  IF update IS NOT INITIAL.
      DATA(creation_date) = cl_abap_context_info=>get_system_date(  ).

      LOOP AT update-shoppingcart INTO DATA(OnlineOrder1) WHERE %control-OverallStatus = if_abap_behv=>mk-on .
        LOOP AT zbp_shopcarttp_000=>purchase_requisition_details INTO DATA(purchase_reqn_via_eml) WHERE  pid IS NOT INITIAL AND order_uuid = onlineorder1-OrderUUID.
          CONVERT KEY OF i_purchaserequisitiontp FROM purchase_reqn_via_eml-pid TO DATA(ls_pr_key1).
          UPDATE zashopcart_000 SET purchase_requisition = @ls_pr_key1-PurchaseRequisition,
                                        pr_creation_date = @creation_date
                                        WHERE order_uuid = @purchase_reqn_via_eml-Order_UUID.
        ENDLOOP.
      ENDLOOP.
    ENDIF.
************END of CONVER KEY EML code snippet******************

    LOOP AT delete-shoppingcart INTO DATA(shoppingcart_delete) WHERE OrderUUID IS NOT INITIAL.
      DELETE FROM zashopcart_000 WHERE order_uuid = @shoppingcart_delete-OrderUUID.
      DELETE FROM zdshopcart_000 WHERE orderuuid = @shoppingcart_delete-OrderUUID.
    ENDLOOP.
  ENDMETHOD.

ENDCLASS.

CLASS lhc_shopcart DEFINITION INHERITING FROM cl_abap_behavior_handler.
  PRIVATE SECTION.
    CONSTANTS:
      BEGIN OF c_overall_status,
        new       TYPE string VALUE 'New / Composing',
        submitted TYPE string VALUE 'Submitted / Approved',
        cancelled TYPE string VALUE 'Cancelled',
      END OF c_overall_status.
    METHODS:
      get_global_authorizations FOR GLOBAL AUTHORIZATION
        IMPORTING
        REQUEST requested_authorizations FOR ShoppingCart
        RESULT result,
      get_instance_features FOR INSTANCE FEATURES
        IMPORTING keys REQUEST requested_features FOR ShoppingCart RESULT result.

    METHODS calculateTotalPrice FOR DETERMINE ON MODIFY
      IMPORTING keys FOR ShoppingCart~calculateTotalPrice.

    METHODS setInitialOrderValues FOR DETERMINE ON MODIFY
      IMPORTING keys FOR ShoppingCart~setInitialOrderValues.

    METHODS checkDeliveryDate FOR VALIDATE ON SAVE
      IMPORTING keys FOR ShoppingCart~checkDeliveryDate.

    METHODS checkOrderedQuantity FOR VALIDATE ON SAVE
      IMPORTING keys FOR ShoppingCart~checkOrderedQuantity.

    METHODS createPurchaseRequisitionItem FOR MODIFY
      IMPORTING keys FOR ACTION ShoppingCart~createPurchaseRequisitionItem RESULT result.

    METHODS checkPurchaseRequisition FOR VALIDATE ON SAVE
      IMPORTING keys FOR ShoppingCart~checkPurchaseRequisition.

ENDCLASS.

CLASS lhc_shopcart IMPLEMENTATION.

  METHOD get_global_authorizations.
  ENDMETHOD.

  METHOD get_instance_features.
    " read relevant olineShop instance data
    READ ENTITIES OF zr_shopcarttp_000 IN LOCAL MODE
      ENTITY ShoppingCart
        FIELDS ( OverallStatus )
        WITH CORRESPONDING #( keys )
      RESULT DATA(OnlineOrders)
      FAILED failed.

    " evaluate condition, set operation state, and set result parameter
    " update and checkout shall not be allowed as soon as purchase requisition has been created
    result = VALUE #( FOR OnlineOrder IN OnlineOrders
                      ( %tky                   = OnlineOrder-%tky
                        %features-%update
                          = COND #( WHEN OnlineOrder-OverallStatus = c_overall_status-submitted  THEN if_abap_behv=>fc-o-disabled
                                    WHEN OnlineOrder-OverallStatus = c_overall_status-cancelled THEN if_abap_behv=>fc-o-disabled
                                    ELSE if_abap_behv=>fc-o-enabled   )
                        %action-Edit
                          = COND #( WHEN OnlineOrder-OverallStatus = c_overall_status-submitted THEN if_abap_behv=>fc-o-disabled
                                    WHEN OnlineOrder-OverallStatus = c_overall_status-cancelled THEN if_abap_behv=>fc-o-disabled
                                    ELSE if_abap_behv=>fc-o-enabled   )
                        %action-createPurchaseRequisitionItem
                          = COND #( WHEN OnlineOrder-OverallStatus = c_overall_status-submitted OR OnlineOrder-%is_draft = if_abap_behv=>mk-on
                                    THEN if_abap_behv=>fc-o-disabled
                                    ELSE if_abap_behv=>fc-o-enabled )
                        ) ).
  ENDMETHOD.

  METHOD calculateTotalPrice.
    " read transfered instances
    READ ENTITIES OF zr_shopcarttp_000 IN LOCAL MODE
      ENTITY ShoppingCart
        FIELDS ( OrderID TotalPrice Price OrderQuantity )
        WITH CORRESPONDING #( keys )
      RESULT DATA(OnlineOrders).

    LOOP AT OnlineOrders ASSIGNING FIELD-SYMBOL(<OnlineOrder>).
      " calculate total value
      <OnlineOrder>-TotalPrice = <OnlineOrder>-Price * <OnlineOrder>-OrderQuantity.
    ENDLOOP.

    "update instances
    MODIFY ENTITIES OF zr_shopcarttp_000 IN LOCAL MODE
      ENTITY ShoppingCart
        UPDATE FIELDS ( TotalPrice )
        WITH VALUE #( FOR OnlineOrder IN OnlineOrders (
                          %tky       = OnlineOrder-%tky
                          TotalPrice = <OnlineOrder>-TotalPrice
                        ) ).
  ENDMETHOD.

  METHOD setInitialOrderValues.
    DATA delivery_date TYPE I_PurchaseReqnItemTP-DeliveryDate.
    DATA(creation_date) = cl_abap_context_info=>get_system_date(  ).
    "set delivery date proposal
    delivery_date = cl_abap_context_info=>get_system_date(  ) + 14.
    "read transfered instances
    READ ENTITIES OF ZR_shopcarttp_000 IN LOCAL MODE
      ENTITY ShoppingCart
        FIELDS ( OrderID OverallStatus  DeliveryDate OrderQuantity  )
        WITH CORRESPONDING #( keys )
      RESULT DATA(OnlineOrders).

    "delete entries with assigned order ID
    DELETE OnlineOrders WHERE OrderID IS NOT INITIAL.
    CHECK OnlineOrders IS NOT INITIAL.

    " **Dummy logic to determine order IDs**
    " get max order ID from the relevant active and draft table entries
    SELECT MAX( order_id ) FROM zashopcart_000 INTO @DATA(max_order_id). "active table
    SELECT SINGLE FROM zdshopcart_000 FIELDS MAX( orderid ) INTO @DATA(max_orderid_draft). "draft table
    IF max_orderid_draft > max_order_id.
      max_order_id = max_orderid_draft.
    ENDIF.

    "set initial values of new instances
    MODIFY ENTITIES OF zr_shopcarttp_000 IN LOCAL MODE
      ENTITY ShoppingCart
        UPDATE FIELDS ( OrderID OverallStatus  DeliveryDate   )
        WITH VALUE #( FOR order IN OnlineOrders INDEX INTO i (
                          %tky          = order-%tky
                          OrderID       = max_order_id + i
                          OverallStatus = c_overall_status-new  "'New / Composing'
*                          Price         = COND #( WHEN order-OrderedItem = 'desktop' then 1500
*                                                  when order-OrderedItem = 'laptop' then  2### )

                          DeliveryDate  = delivery_date
                          CreatedAt     = creation_date
                        ) ).
  ENDMETHOD.

  METHOD checkDeliveryDate.
*   " read transfered instances
    READ ENTITIES OF zr_shopcarttp_000 IN LOCAL MODE
      ENTITY ShoppingCart
        FIELDS ( DeliveryDate )
        WITH CORRESPONDING #( keys )
      RESULT DATA(OnlineOrders).

    DATA(creation_date) = cl_abap_context_info=>get_system_date(  ).
    "raise msg if 0 > qty <= 10
    LOOP AT OnlineOrders INTO DATA(online_order).
      IF online_order-DeliveryDate IS INITIAL OR online_order-DeliveryDate = ' '.
        APPEND VALUE #( %tky = online_order-%tky ) TO failed-ShoppingCart.
        APPEND VALUE #( %tky         = online_order-%tky
                        %state_area   = 'VALIDATE_DELIVERYDATE'
                        %msg          = new_message_with_text(
                                severity = if_abap_behv_message=>severity-error
                                text     = 'Delivery Date cannot be initial' )
                      ) TO reported-ShoppingCart.

      ELSEIF  ( ( online_order-DeliveryDate ) - creation_date ) < 14.
        APPEND VALUE #(  %tky = online_order-%tky ) TO failed-ShoppingCart.
        APPEND VALUE #(  %tky          = online_order-%tky
                        %state_area   = 'VALIDATE_DELIVERYDATE'
                        %msg          = new_message_with_text(
                                severity = if_abap_behv_message=>severity-error
                                text     = 'Delivery Date should be atleast 14 days after the creation date'  )

                        %element-orderquantity  = if_abap_behv=>mk-on
                      ) TO reported-ShoppingCart.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

  METHOD checkOrderedQuantity.
    "read relevant order instance data
    READ ENTITIES OF zr_shopcarttp_000 IN LOCAL MODE
    ENTITY ShoppingCart
    FIELDS ( OrderID OrderedItem OrderQuantity )
    WITH CORRESPONDING #( keys )
    RESULT DATA(OnlineOrders).

    "raise msg if 0 > qty <= 10
    LOOP AT OnlineOrders INTO DATA(OnlineOrder).
      APPEND VALUE #(  %tky           = OnlineOrder-%tky
                      %state_area    = 'VALIDATE_QUANTITY'
                    ) TO reported-ShoppingCart.

      IF OnlineOrder-OrderQuantity IS INITIAL OR OnlineOrder-OrderQuantity = ' '.
        APPEND VALUE #( %tky = OnlineOrder-%tky ) TO failed-ShoppingCart.
        APPEND VALUE #( %tky          = OnlineOrder-%tky
                        %state_area   = 'VALIDATE_QUANTITY'
                        %msg          = new_message_with_text(
                                severity = if_abap_behv_message=>severity-error
                                text     = 'Quantity cannot be empty' )
                        %element-orderquantity = if_abap_behv=>mk-on
                      ) TO reported-ShoppingCart.

      ELSEIF OnlineOrder-OrderQuantity > 10.
        APPEND VALUE #(  %tky = OnlineOrder-%tky ) TO failed-ShoppingCart.
        APPEND VALUE #(  %tky          = OnlineOrder-%tky
                        %state_area   = 'VALIDATE_QUANTITY'
                        %msg          = new_message_with_text(
                                severity = if_abap_behv_message=>severity-error
                                text     = 'Quantity should be below 10' )

                        %element-orderquantity  = if_abap_behv=>mk-on
                      ) TO reported-ShoppingCart.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

  METHOD createpurchaserequisitionitem.
    READ ENTITIES OF zr_shopcarttp_000 IN LOCAL MODE
    ENTITY ShoppingCart
      ALL FIELDS WITH
      CORRESPONDING #( keys )
    RESULT DATA(OnlineOrders).
***Integrate EML statement for Purchase Requisition create in case of released API implementation scenario ************
***Begin of Code Snippet********
    DATA: purchase_requisitions      TYPE TABLE FOR CREATE I_PurchaserequisitionTP,
          purchase_requisition       TYPE STRUCTURE FOR CREATE I_PurchaserequisitionTP,
          purchase_requisition_items TYPE TABLE FOR CREATE i_purchaserequisitionTP\_PurchaseRequisitionItem,
          purchase_requisition_item  TYPE STRUCTURE FOR CREATE i_purchaserequisitiontp\\purchaserequisition\_purchaserequisitionitem,
          delivery_date              TYPE I_PurchaseReqnItemTP-DeliveryDate,
          n                          TYPE i.
    LOOP AT onlineorders INTO DATA(onlineorder) WHERE OverallStatus = c_overall_status-new .
*   SQL statement to include product and productgroup
      SELECT SINGLE FROM zi_products_000 FIELDS product, productgroup WHERE ProductText = @onlineorder-OrderedItem INTO @DATA(productdata) .
*
*      delivery_date = cl_abap_context_info=>get_system_date(  ) .
      delivery_date = cl_abap_context_info=>get_system_date(  ) + 14 .
      n += 1.
      "purchase requisition
      DATA(cid) = onlineorder-OrderID && '_' && n.
      purchase_requisition = VALUE #(   %cid                      = cid
                                        purchaserequisitiontype   = 'NB'  ) .
      APPEND purchase_requisition TO purchase_requisitions.

      "purchase requisition item
      purchase_requisition_item = VALUE #(
                                        %cid_ref = cid
                                        %target  = VALUE #(  (
                                                      %cid                         = |My%ItemCID_{ n }|
                                                      plant                        = '1010'  "Plant 01 (DE)
                                                      accountassignmentcategory    = 'U'  "unknown
*                                                       PurchaseRequisitionItemText =  . "retrieved automatically from maintained MaterialInfo
                                                      requestedquantity            = onlineorder-OrderQuantity
                                                      purchaserequisitionprice     = onlineorder-Price
                                                      purreqnitemcurrency          = onlineorder-Currency
                                                      Material                     = productdata-Product

                                                      materialgroup               = productdata-Productgroup
*                                                        Material                  = 'laptop'
*                                                       materialgroup              = 'system'
                                                      purchasinggroup             = '001'
*                                                       purchasingorganization     = '1010'
                                                      DeliveryDate                = delivery_date   "delivery_date  "yyyy-mm-dd (at least 10 days)
                                                      CreatedByUser               = OnlineOrder-CreatedBy
                                                      ) ) ).
      APPEND purchase_requisition_item TO purchase_requisition_items.
    ENDLOOP.
    IF keys IS NOT INITIAL .
      "purchase requisition
      MODIFY ENTITIES OF i_purchaserequisitiontp
        ENTITY purchaserequisition
          CREATE FIELDS ( purchaserequisitiontype )
          WITH purchase_requisitions
        "purchase requisition item
        CREATE BY \_purchaserequisitionitem
          FIELDS ( plant
*                  purchaserequisitionitemtext
                  accountassignmentcategory
                  requestedquantity
                  baseunit
                  purchaserequisitionprice
                  purreqnitemcurrency
                  Material
                  materialgroup
                  purchasinggroup
                  purchasingorganization
                  DeliveryDate

                )
        WITH purchase_requisition_items
      REPORTED DATA(reported_create_pr)
      MAPPED DATA(mapped_create_pr)
      FAILED DATA(failed_create_pr).
      READ ENTITIES OF I_PurchaseRequisitionTP
      ENTITY PurchaseRequisition
      ALL FIELDS WITH CORRESPONDING #( mapped_create_pr-purchaserequisition )
      RESULT DATA(pr_result)
      FAILED DATA(pr_failed)
      REPORTED DATA(pr_reported).
    ENDIF.

    IF mapped_create_pr IS NOT INITIAL.
      LOOP AT onlineorders INTO DATA(onlineorder1) WHERE OverallStatus = c_overall_status-new .
        LOOP AT mapped_create_pr-purchaserequisition INTO DATA(purchaserequisition_details)   .
          IF onlineorder1-OrderID = substring_before( val = purchaserequisition_details-%cid sub = '_' ).

            APPEND VALUE #( cid                = purchaserequisition_details-%cid
                            pid                = purchaserequisition_details-%pid
                            order_uuid         = onlineorder1-OrderuuID  ) TO zbp_shopcarttp_000=>purchase_requisition_details .
            DELETE ADJACENT DUPLICATES FROM zbp_shopcarttp_000=>purchase_requisition_details COMPARING pid.
          ENDIF.
        ENDLOOP.
      ENDLOOP.
    ENDIF.
***End of EML Code Snippet********

    MODIFY ENTITIES OF zr_shopcarttp_000 IN LOCAL MODE
      ENTITY ShoppingCart
          UPDATE FIELDS ( OverallStatus )
            WITH VALUE #( FOR key IN keys (
              OrderUUID = key-OrderUUID
              OverallStatus = c_overall_status-submitted
          ) ).

    "Read the changed data for action result
    READ ENTITIES OF zr_shopcarttp_000 IN LOCAL MODE
      ENTITY ShoppingCart
        ALL FIELDS WITH
        CORRESPONDING #( keys )
      RESULT DATA(result_read).
    "return result entities
    result = VALUE #( FOR result_order IN result_read ( %tky   = result_order-%tky
                                                        %param = result_order ) ).

  ENDMETHOD.

  METHOD checkpurchaserequisition.
  ENDMETHOD.

ENDCLASS.
